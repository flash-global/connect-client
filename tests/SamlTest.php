<?php

namespace Test\Fei\Service\Connect\Client;

use Fei\Service\Connect\Client\Metadata;
use Fei\Service\Connect\Client\Saml;
use LightSaml\Credential\X509Certificate;
use LightSaml\Model\Metadata\AssertionConsumerService;
use LightSaml\Model\Metadata\IdpSsoDescriptor;
use LightSaml\Model\Metadata\KeyDescriptor;
use LightSaml\Model\Metadata\SingleLogoutService;
use LightSaml\Model\Metadata\SingleSignOnService;
use LightSaml\Model\Metadata\SpSsoDescriptor;
use LightSaml\Model\Protocol\Response;
use LightSaml\SamlConstants;
use PHPUnit\Framework\TestCase;

class SamlTest extends TestCase
{
    public function testMetadataAccessors()
    {
        $saml = new Saml(new Metadata());

        $this->assertEquals($saml->getMetadata(), new Metadata());
        $this->assertAttributeEquals($saml->getMetadata(), 'metadata', $saml);
    }

    public function testGetAcsLocation()
    {
        $saml = new Saml($this->getMetadata());

        $this->assertEquals($saml->getAcsLocation(), '/acs.php');
    }

    public function testGetLogoutLocation()
    {
        $saml = new Saml($this->getMetadata());

        $this->assertEquals($saml->getLogoutLocation(), '/logout.php');
    }

    public function testReceiveSamlResponse()
    {
        $saml = new Saml($this->getMetadata());

        $this->assertNull($saml->receiveSamlResponse());
    }

    public function testReceiveSamlResponseWithPost()
    {
        $_SERVER['REQUEST_METHOD']='POST';
        $_POST=['SAMLResponse'=>''];

        $saml = new Saml($this->getMetadata());

        $response=$saml->receiveSamlResponse();

        $this->assertNotNull($response);
    }

    public function testReceiveSamlResponseWithPostNull()
    {
        $_SERVER['REQUEST_METHOD']='POST';
        $_POST = [];

        $saml = $this->getMockBuilder(Saml::class)
            ->enableOriginalClone()
            ->setConstructorArgs([$this->getMetadata()])
            ->setMethods(['retrievePostWithInputStream'])
            ->getMock();

        $saml->expects($this->once())
            ->method('retrievePostWithInputStream')
            ->willReturn(['SAMLResponse' => 'PD94bWwgdmVyc2lvbj0iMS4wIj8+CjxzYW1scDpSZXNwb25zZSB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBJRD0iX2NkMDBkNWVmNjg0NDI0MGZmN2NjNmIwMmVhMTk3ZTBjNGIxMjkxYWMzYiIgVmVyc2lvbj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMTctMDktMTlUMTI6NDc6MjlaIiBEZXN0aW5hdGlvbj0iaHR0cDovL3RyYW5zbGF0ZS5kZXY6ODA4NC9hY3MucGhwIj48c2FtbDpJc3N1ZXIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+aHR0cDovL2lkcC5kZXY6ODA4MDwvc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CiAgPGRzOlNpZ25lZEluZm8+PGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KICAgIDxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KICA8ZHM6UmVmZXJlbmNlIFVSST0iI19jZDAwZDVlZjY4NDQyNDBmZjdjYzZiMDJlYTE5N2UwYzRiMTI5MWFjM2IiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+PGRzOkRpZ2VzdFZhbHVlPmJpbFNWVXloSVFXZS9kUG9tSGJVNy9MNDhyOD08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+cTBKMkt3RCtaK0ZhSm1YSlNhTEhzQkpOeWhsYU1kdU1Tb1ZOUjgxQ2o2S0tVY1ZhUlVSV3gxY2JRcS84Q1BhTGpaQlF3WWhhQ0hGay9GWUlXam9mUXk2VlJaOGpCdXlTQzlqTU1IMlM5allwcG5Ib1BKU1RrWnV1S1RrNTNheE1NUjJ5SFNqUmwvSUk3cjR3L0RjVkVISWN5RnA1cFN0c0pvNnNjZDZ6Q1prPTwvZHM6U2lnbmF0dXJlVmFsdWU+CjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSURKVENDQW82Z0F3SUJBZ0lKQUtaN0NBT0l6Ui9HTUEwR0NTcUdTSWIzRFFFQkN3VUFNR3N4Q3pBSkJnTlZCQVlUQWtaU01STXdFUVlEVlFRSUV3cFRiMjFsTFZOMFlYUmxNUkV3RHdZRFZRUUhFd2hCYkdkeVlXNW5aVEVSTUE4R0ExVUVDaE1JVDNCamIyUnBibWN4Q3pBSkJnTlZCQXNUQWtsVU1SUXdFZ1lEVlFRREV3dHZjR052WkdsdVp5NWxkVEFlRncweE5qQTVNVE14TkRJMk1UWmFGdzB4TnpBNU1UTXhOREkyTVRaYU1Hc3hDekFKQmdOVkJBWVRBa1pTTVJNd0VRWURWUVFJRXdwVGIyMWxMVk4wWVhSbE1SRXdEd1lEVlFRSEV3aEJiR2R5WVc1blpURVJNQThHQTFVRUNoTUlUM0JqYjJScGJtY3hDekFKQmdOVkJBc1RBa2xVTVJRd0VnWURWUVFERXd0dmNHTnZaR2x1Wnk1bGRUQ0JuekFOQmdrcWhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUF6VnVRdEpRMXkwOUYrelpYTlhXbVdIYVVyR24rQzIzakRSMjZOdi9qL3dJS3JtRzJhTkdIMHU1ZiszcFljL1d1b25tV1dlSU5vRlI4S29RUXU5a2ZrRmhONFE2OVpnZnVCT2NodFBBVG1lcTFlVjJ5WldMeGMxdENyckN6bmlNeXpCemtpS3RZMGMrRG56R3JoR2l0YzhSd2hEOU81YnFzMTFicjE3T3pZdmNDQXdFQUFhT0IwRENCelRBZEJnTlZIUTRFRmdRVXh3N09IdFk1M0NCMmhpeXdONHJqS05hZmdta3dnWjBHQTFVZEl3U0JsVENCa29BVXh3N09IdFk1M0NCMmhpeXdONHJqS05hZmdtbWhiNlJ0TUdzeEN6QUpCZ05WQkFZVEFrWlNNUk13RVFZRFZRUUlFd3BUYjIxbExWTjBZWFJsTVJFd0R3WURWUVFIRXdoQmJHZHlZVzVuWlRFUk1BOEdBMVVFQ2hNSVQzQmpiMlJwYm1jeEN6QUpCZ05WQkFzVEFrbFVNUlF3RWdZRFZRUURFd3R2Y0dOdlpHbHVaeTVsZFlJSkFLWjdDQU9JelIvR01Bd0dBMVVkRXdRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnWUVBUmg3dUF6V1ZieDVBRDFWNWtrUmRjS3BBRk0vZG9NSXZZa0dJU0NISDFTbTA2OU4zRzVvVTZpaWNJMkxieFRGS1Vzcm0wT05JQ3N2cE1KTnY1d3pvRUhIQS93WWtPcXZTc1BVeVBMQmc1V2hxb1RiWGZ3V0hhZVgyRlFUaWhuTG9pbFlhRnVNbDhJYUV4MFhVdXVpbGJsZFhUcDhSQnBlQjdEcnM4ZHc4cERBPTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkVuY3J5cHRlZEFzc2VydGlvbiB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48eGVuYzpFbmNyeXB0ZWREYXRhIHhtbG5zOnhlbmM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jIyIgeG1sbnM6ZHNpZz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIgVHlwZT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjRWxlbWVudCI+PHhlbmM6RW5jcnlwdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI2FlczEyOC1jYmMiLz48ZHNpZzpLZXlJbmZvIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjx4ZW5jOkVuY3J5cHRlZEtleT48eGVuYzpFbmNyeXB0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjcnNhLTFfNSIvPjx4ZW5jOkNpcGhlckRhdGE+PHhlbmM6Q2lwaGVyVmFsdWU+TTZIV09HOHdZYjlhTHBxM0ZZWS9ISWliMUpQNmNxOUw1RlZ5aTFCYjhTL09kSFRyaWRyRU5zbyt2MmdmdTkwTG1rM0krZkdINWE0dU9hZmtDSlEzbVd2bzEzTXNZb2ZKLzN1TmVFTXlaWm9jb2dTR2F1c0ljZUhJcGt4ckN4TmZYZlFvM2piVi9xeWhhcjBRU2ZWYnFpUDg5cGJBS21jdlJjak1jNzcxR05FPTwveGVuYzpDaXBoZXJWYWx1ZT48L3hlbmM6Q2lwaGVyRGF0YT48L3hlbmM6RW5jcnlwdGVkS2V5PjwvZHNpZzpLZXlJbmZvPgogICA8eGVuYzpDaXBoZXJEYXRhPgogICAgICA8eGVuYzpDaXBoZXJWYWx1ZT5jZnAxZGJocmdxVDhoMTNXWjFnb0wxU3p4cW9nSTZSaU1hRm56VVJCMEQwQWRqWE5SZCtMY3dYeDdOWFJzaHBzZ3l2cEZCcEEvVk5HTVlkbXRkbFpoUTBkNzVKaHdqUlYzZjYydmFqbkQ0cDBhMklzcUg4SjRmeGMrTDZVZVY4b1U1TkVlTERLUm8xQ3RaT0FWSWJpcGZLOE5aSlc2RGZUZ1BpUm5DWGFpM3N6eC81M2tIYVJvcGs5M1ZzMXF1ellwRDNBd0hNaVpTZnA1NlVDZ1dNVGFSZjBOaFRGSUlBbWxCNkVqTnorTGV1eVlKRUsxbHN5UW4wWUdZdDc0SUgvN3hIaVB0SG1pd0tZYzdDNEVHeC9NM0RLR2hzN3J0bkk2Sm50ZHVOTi9WalJrWTgzS2Z0azYwU1ZlaFh0R0hvU3V2d2xKS3VYWTlDTjBxL0FBVEpZSUl5NThHMlRaUWdOOVFGZDZDWlZpWHNzakFWcmJrMEdIN2xub1ZUclZDVXUveGFRYUh5d1BOd29iNU1MYUpKVmdSL1FVUGp4NVBDUnJyZE9XNkY0Zi9QS2xMMHd6MTNTQndFOFBzSFRlNHowQWRzYUFub3BVRzJjL3Y1TXdleEhmWUZMRTVNNHpwNnJUM2ZDbEEzZ2VvSGMyR2VoZjRLMmNoVVNlREpEQSt4R2pRd0Y3OXQzZlhacmdrRnZncmt1YXNnb3hRUllubVgzUkdraG1xbkpIT3NXOXdXTUJ4b2N2R1VuTFZVNExPM0ZRVjJiNjlhTzF1S1RjbW1EV21rc21hNThhSDFUZGU5OFdsMmRRaU8wSnd0MG9nSlB2WUlQQUpaNHRuMmgzUDNrVVBMRXd3QmlvRkhtRVpvY1NEbGtPWENpWXh1NmJWaUhrN0EvTTFxQmdtZGREdTYrbzJkZHZzM0lWYXUrNERNOGM3Q1lPWUxGUjR5RnhkVHNKakpnbDZyY0s0eklLcnZ4R1huU2drSUFTV2FZcmJrd1dCT0pzek42VXorTXgrMGszZEl0RTBuc3hoNlFBVmVWTjZ0RmlkQS96UFNFTEhxZStWeDV1Z3RoU2NsdGkyUmZpdTQ3eTZEenk1Z2RQYm80Z3F5TW1aWjlFeFpVSkt2ZTJCU0JnYmlmbjQ3ZkU4K0ZYb2dOWmxSZmJOUnVreGhoQnJ5ajh1d3RqUVNOUzRoUWtYZGExSEVmVzVLd3RudmlHZ3NXN2pDUWhJdVY0b2oxYjdySG4rZDV5UUdCVzVTQTJSK1dya0Z1M2E3c09maWFraUhocXpqZzF2VjBCWEdIV2RpbjNQUXBDbFZpLzAvZXMrRXFqSEpyRWMxVUJYMjhHMm5YRStOTXRxZGJxZHJpUW4wOGZEZWk0MERqNTlpWmIyOFA2Wm00emh6dkNZRjRWSkxrMlJOSE9odDRLQ0dwMGM1TXhIZTFRZHlnN0VMQUVqUldxRHhYRWZwWjRwbmdmWDdqWmx6cnBWZUc0eFMxeVRadEF3SHVNUDBkZ2lkN045a1Q0UWVuRHZTbVFaNGZ2Qk5Ja3lpVkNxNUFnV3JFNk5uMm13Y1E1SUF2YkwyZjFyRUtwSkdtS0I5bDRVbW5xZ0lOMi9wc1BWRFF6SFRManFCUDVNTzhYQkVqNXNxanpWWUkrRVBoQ2lwWnlLdGJ6bGpESTZTZkhnYm9sem1Ed3ZjdTY4MThzM1MrT3JFWmt0bVM1T2I2YnFPN1pSMHpleDhqOFliZmI2TmNDUGx0Rkpacm56czZXRE9SOER6UlR5SXp1RnduMlplOGdFbzgrc0o0ODJGS2RUbE04NWdKaTBrbGtRWDJES1ZoQlp3L01WUUkwZG1hL0ZmTWRPSEpFeUVmbnVxSVZzcVRrUkdDRDhXeEVHeml1SVIxWUdNcURZTG9kaW5jVWJaREIybmhkTFZBanA0OHlnNDBiZ2I1d1NaZlp0ZHpUYlp0S1BvWlpCbVB0c3FVeVRzeFl3Nm9tOWI4UTVLeExLNkNFbWlNTEtJSU5yRFZlQ1ZvWml6U0MyMmRxa3VCS1RCcmVRYUc2cit3M0ZkK1RabW1zYjJqNjNpaVd6Z0k4TVU1TklSREwwd1M3UHVVcDA4MDVzUWlhNDhJeU81NlVQU2Z0TFFIMDU0aW5JbmFSV0toZFNBRjFKRjdMT3I2YXFEbmtyc1BORUMxd3pXOVFTakw2c2QzTjZPbThXY0F2TzJBbnNxa1ZOeGZaYXBlWnpPUDl6TjhpQWFGVjJWNHF4UVFCT1VWbDd3cWJadkdFeWw5RWtFVkYvR0xmM1laUkFPbnVsRTRicW9Fd3NuQmdPWVRBbGlkUllrS05DSGNLc0RTTUkyS2FIM09GeStTWEhjMWs2WU55NHNWV1JLcUdaS0dSRTBscmRTZ2lKSTlNZWx2YkRUdExzVXNCcWduSHRUMUVFeHFaMjJBd2NQSGM4Ty9vcjdOZlhxZW9IQ3J4UGNjazcyYTlCMDYwYUpZTEEyejA4RmlndE9IVElZTnhxeGo4QUZsRUgzeVl4b1V1Vkt3a1ZHOEZxTkF0SGxzWmE4V0w2K0gxLzFCRUhnQmx5K24yNlNPNGo5YlViV3psUWMxMXlCOFNtNmI0dWFDSUwyTWVudllXVUhycFY3bFNBa2h2NzhZMzZCaHIvMUxuYVl0M3FPUWZ5Z3VzM1JiTEZHbHdudkNITUlLUjRzWVZwVzV4OXdDQkVLVGQ2OUlHL0RYblRBOG8rQk1Zb1N4SkhVcHRGdWl6a05wY3NRLzB6QWhCNVZkWWd3YkZFTzVqV3gwMVQ1WjQ3OGRzb3RINk1zZG5Tb3FnUXFDQnJSTDU1YitPN0xZb3YwWHVUM2tHZXFtN2pScVFIUDVoVWZ3b3NiUmZCNmdPQm1lbmdEK0lQalhDSmhRa09VRldhRGFRZ1MyTXh5Qk5SMTVqbzdzTS91TjA2Q1FWd3BiaGNJS2RZZHpSdWdScXFmWmtLWVdubHoxeFJsNGxTa3BJU3RpVkUzK3ZHTFN2MnZFQ1NKUnJyd0FaKzdrajByWjFNUmoveHRFZ0I2MThEMTY2ZEs1aEdZbSsxSGlXZFRQTHZSeWFIMFhjYi9uMGx1djV1aXZLRGE1Y2dxc0NjSzFIRzBmMnZUNkl4Mk41UGpNR0wvck0yQ21ZNFpFeitYblg5UmZsTFJuTUJQeUFwOHgwNXFrWTZxa0xTbDljSHVIQXc3S2hCUWdId0UrS25mVnlKU05DZVMzNHE1Z0ZZbGg4MFlTMmhua29aSnF4Uzladi9rQTI4U2NpOFFGaTFFTnZRVjlyZ2hHVzB5bk1SdEdhaGgzYXFyQ1RDeVdDV3pkaUtqbVlGSmxzSmdVUnhnUyt2b215cFJLbnZvRm1vL25zYTArM1RYNytNdFVUZkdNR0xUOTNmOUZEbkRlNUZyY1hGUi8vL1pEQzFmdldCdjdySEpVUEx6cGRBWmVMQTc4QUlYSXJMMlAyMTMvZGJyWUk0QVlmNzVZMDVTbndWWVJTVFMxKzM1U3Z2MDBlSmQwQmFrajd5TVA1ZFoxeHMzV291YUpFc285M3lxSUtHSUNBbDFwWWV0NnYrUE9hTjFmNEJCQWJqMCtVYzJyWEhaOG9JVHhqWkxVeEl0U2dWeUdWdzNwMGE3Y05ZR0FieVhHZlM4QjROb2xCVjVqV0hzY1RBSFF4OGdmdHNuN2EzNndVcHhZd2tNY2hmeXdXNW1nUnh3bmNrakNBY2FkSXkxT01vQ1JlNUVZaWdHTmtsSHVqVVhXZ0dYM0lMbllzQVNpQTFYZHdMUGJDdzlycW1VNFJOSkVrQTdJMERVSC9QSUNPMHVmTS8xcXlQbWtGaUtqTkxZZzc1dXlrcUdMR2xnSGgwTFdHTnE5OUVGZkYxU3RpeDNqazY1UGM3ZTRnSVBaNGZWL1RmQXdWdFJiVExYK3ZDcUVKNGhTLzliZGdqNURHSG1ZL2RRNzRUNzQzQms5d0plR1BoQjhvanFDTXNUMWxaME9OWDFZV1dSbXRWYUczNy9ialNFcDNwQjdkWkorY1hCNEhIVlRXMXRvS2t4dFdTTlFYTG8yWmpqT2pFcmRKTHFXb1A3Rzd5bFJHMllpQnNVMWZ3eWZuUDJGQlRhQkNGMWlhVmdXVFc2dDkwOWlhWkkvMXNYRUdRcDBOUUpOK0hZbHVOdjJGbHpQclpKV3Y2bmpRVzF4M1RzNmhYbThaWnJUY3pROXZ0QmZwWUUxUXRpekptUmhvOEtiaWo1cEE5OExNQ0FRVnJ0Qmtxak85aWVuRUJpeWNpTnhJeWY0R3NTdzVudzhFYjROOTNnV1RMRkRUVVVKTW9YYlV5bUY2NTA5MlVvVW5kSm52cmxVcmIzak8ySU8zQ29Ub3JxVGZkcGRBNk1ML0NaTWtuL2VmNkpWMW5ubDUyeEVvTmRkL203Ymh2N3BTaDZ1czU2YUZIS1dpdzM1K3BuUjc4d2hkeVpEUXNXQ0VWaXlhR2N2YVlTNk41UHd1WE5CTWdxeXRFcVpOVGJSUjR3RkRiYTFnYUluNTRrQm03THdVWklGTi8rUW9VOWpHZHdaVmtkRFluZnRDa29HdW5mVXZPMWYzK29Pd3Vyam5UczZGTXRFNGsxWG5QSHZmVHoxRlRvR0x4T3RLbCtnT3ErcHJGeEhHT2U2UDNtUlIvUXJoTnJGeXZGSG01TzhUQnd3VTNORGFNa1YvSEtxM3prYUxKdi8ybmRGaktBeFVVS1MwbEY3OXExb2lBdC9UK0psTnVoMEdmZnhzS0JoeHZpbGhFMnIzUEtmNEdTUnYyaVpTNFA1blIya1NDOUNOeTBKREliVXdadWtKVmYzRkt2U0pYUUNrbTc3aTQzOUlhV1hQRUxMN2VsbHNjalpVVk9XbnZvZExJbXFZUFVLNklmZXRUN0VmSjZXNzFoNG05dXRoWDRoVUQvU0FmY0dWcFNQS1VCUk5ZYjVGMDdBV1Nic01ZWVRDMUhuY2tzdTBKYWthZ1RjUGJZNm5qMllxMDVhSFdwdUtNdHRvKzN4ell5SkVFdEhoMU5xWUxDUVI4SFF1UmtpNmUvRHpkZzFCY0Q0dDR3dzNJZXAxbWJWa0J4ZllmNTNWMlYvNWhoRC9jQmpXaTNFSlRRU0sxSWxnMVZ2aGk3NEhORjVySS91dWxnTDVkcjRHZkt5eHYvalNTZXE0U2ZNbXB6WXg1OEZzNGVrd1hKMWVNcHFYOVk4Q3NWOTIwUzFKREJEMUJKclNZRWMwRWxUajhESjVEVElkZFV0VVFObUJBcVkrOXZ1NWE0TGJkY3JFMEhETTIrOGxzK3pmSUFUWENwWDB6c1dGWG1GajFqQ08xZFFPK1ZpTEpxUVVtcWYzcEdUWmZ6eFBiaFgvcTZaN0N4c1VNWi8vUlY5THVHa0pwdU00YUZuL2E4ZUxPM2JCT0JUVDM0VWltQVdwWDBSakJZZUoyZ2JLQ29IT2orUU1XNHo2ektKYzV3bVhERjUwa2pPSTZwVTR0WjBvYmw5R25rNSs0ck9VVEQyWFRIYU9ybURkL2tGa3RJU2pWUjY2WVhLVjkzdE5KYWZPeERvMUZUNThkd1JaLzlGb05mMTNnRUJPb3V0YU4vb2oyUG1vSXQ0Ti9NZFlRRWtqQXhjenVQbUwwSTUyb3ZpckdpWWVMeFYvWEhJMGRnMkMyNGo2aTREaXZzKzFwdXBhYUdLWW9aRzBnR1FDSklwV3N6SHFDbElDaXQvYnpwVXZTNlVqTHBxZy9mNi9oWVQwUE9paGhuamg3Q1NyZldqVEthV3lJbjJzZDZZOEREOTZsZ0FIZGNJalpSZ2FpZUc2V2FzOTd2cU1YNDlhbllITEp1RFI1R0h4bnBpRmFSVSttTXJXQnVFd3VvbGdMRHE2QUs4c3BqK3prVG5TRkxyWjdXZjB0eW9UMW5jbVFPQVIxdzhHZXlUZDg0cWsraDFvNU41c0NYZGdaYXhJQkcyUWxWQUlrRG0wMkJMUTVkNklyTUFiRURwMHZXeEtBWXJjRDZFYmh6UTNtbENvN05lNDNLU3g0WlpOS0VjaXZKdGtLNjAxQ0hFQjB5alI4ME5jdldIbzJQRThSY1pDRUtadkNDSEpLV0VrbFVGMDYxTUdwZVphU1BCTU5jNURFVzZoaGFvL3VOSkhUZHRsTlpLRVhhLzl5VktjWnFqZHVwOHl0cHN0U0tjcVFBUnI4NXR5a3RtdjFrMkJ1b3dtWndYQTJxN1ZDMkxDam5QKzhURHRxK1lpZmRSblZad0syWCtYMDkvdmhwSnZQYy9FR1lpK29UWFJpVlpvWEZBVTM2NmI4ZDFUdU96b25JeGJzYU9TYmJlQndwWXlUS3M5YTdJbG1iM0tFOGM4dDBObjAxdytCeEZoV3dhV2dWeDU0OTh2TSttRDhRSkJMKzJIU2NJdUZOZFlNenZiNUttL1g4aisrNEppT3Rnci9FZkNrOXpta013djdGVmY2cFByTWd6UXR6aGJzWFhKajdOVXpyZGEwcjA3U1Q1V21MTlNFS1NzNFRhWUlsR0JVV05lTWtlVVp1NlJNZmdKSjZzTWFHc0twVm1NaXdUVjd1ZXJOWU1wbVZlNGl3S3A2R0loQWhFM0RweDl6cHlHdlBJL2N2bXV5c3lNVEdFNFBGRkNnc0h6YzdNbzZPTkV4VnowQm9kYUhqL3YyWjVISkcxZFhZWU8xTTZpeXdGbEpKdjR6VDhSaGlBTENvVlJ2c2M3Zm9ITU1qSnU3aTZOU0hnQWdaZVJOQXEybjk2WXhjcmltbGd1aXRLR2RMSnpvUkNKU0FWYjZDSnJZZ0pjeUk4VmtodHNuUW9VZUNpTENvTDhicEVRSmd6OW5Zb2RSRFB2SUVWM3hBQVNyU212Q3dKTDBPRDUxcU9wSW9YbTF5RVNXZFQrcEZxaVE2ZDhsWDg5dHQ4Z2JtY1RSc05lVytYeEpKNkNrMXkyeGlUd3ZyeXUycFJ4c28vdERSUlJzYVFaL3JwWEc4MW1xMzR2bVk0ZWQ2QkVZZUg2a01rRTRGdDlqbk41SzQxQmc3ZWtMUmdWRzBZSnFLSXlJQjI3M1E4eTJPUGNacEp2N0R0dVdlV2IzcUdxZFI3aWdMZndaQnAyTDhXaDA3bjN0SWNUd0pIektVd3dqcUIyRUQzUE5CanQzaXhhVE1ONjg5MndhOGVwNWduYys0NldqbThTWjJmbTYzVWdLZkdlWW1PTFVOaHBPaWRzWGQxbDNYdmRJUHM4TEdoRklwTXJqU1pvNFhhc1E1WHVYREl6Tlh0eFdIM1NDS3FZZGFGelZZbUR0bTVFTUtyY0gzaDBhMDdwaVZPN1hhWlpHTk9TaFZMeFUrOGhvbXRjVzlPOWw4NU5ybXkzRzc5UXEwKzBqN1pPbXh0T2dqdGlNNVJRUUZZWHA4WFVhajY0RjV1UEExb2REWVhTUUNJSWpLYjBMSFI5UTV3RHo0dytCR3p5QnpIL2c1SFJJQjlIeC9MaE11NkwzSXYrcFdUb2JXUlVFVU5ZSWdFaDVNS1I4cUgxTGNaZGtCMmJtQkJOV01FQk5qcldORUZ6QmRHN2c0Y3djbm1mNVFML3dRTkJwSDNSbXpIUDhHMFRDeU9aMTd2eHF3U0dZdzEwQWZZT3hzVkFvdm1lSG5OdGNycUFTQXJGWjNEMDFMdlJqYU5sd2s5SDlDd3ZSK0tva1hiWXYzWEFvZjkwMnl0MEh3enVhQm0zdXV2aFM5MGYwT20yVDVhMDYwMk9LSGJHUEhxU1h1L2pNWFZhSk8vTG00WHpJQjEybDBDbzFBN2ZkYm9NVWpZUUZNVzF4MFFyTkhOdGNnTDJMVnh3UWJFRWtaZ0M3WWd0Y2tUbklwdENFOUd5QTFXWlpuWWdVeUV0b2NURU1DTEpnZTNwejJjNDJTTFNNd0hXR0EyQkNKSTdZd09JV01BcHpiMUVNUU5XM0pUY2UxUS9iUFpvMWpBQUhwS1hwN0NPckdoKzJTdG9kaHdtckJRRGMrQy9NSTl0Nkc4ZU5XQm41MlMzUnhMcGlESWRJK0FTSFZWeTNleGozV1R6Mkxib0JWeFNZNW1HVHZlYlA2MXh0NmlCN1dKOE0vMENqby9xN0JTV2k1T0IrZllDbXc1TFd2WjFDd1JuVnliL01OL21tQStEZkFCUnV1eDZ2K3owWmNCM2c4cWlob3dTREdMSno4ZjJXRjAvMWw1QWNVT0RmUnR1dDNtWjl3NTB2aUZFNlJId2R3YlY3SytqNnF5eWU0ZW1UbW1CcFMyTXNSV2k2WFh6TkFYQStaRGUzcW1uRjJLa2JXZHZ5MnJaN0ZvYjVxYk5QN1IvQkxSKzBRMnBGSkZBakxFVStEdW1PZTNDS2Q3TnZuM1RUbmVnbnN3V3p5dmFUcHU0ajlOSkhxS2RlTXVpM2Z4U0hOZXd6a1NkbTJ5K0pEcUdNYnZaQU1obDVCa3BRcnJFMFk4QmxoZW9MRUdETnFBcEIweTFxVEFhbVc0TnJlcUROd3FEMWJudDRzdGNFZXAwYVpGZUdjMzhaSmltLzJVWG5XdU5Pc1hQZXc3YnVJMVNOZTUyY3U0NHhrZTZRdVJKVmI1WDJVQ3VCTnRBZE5KYnUxV1ZZWG83MHBpeWhYQWRKRGxNM2pvbE5kRWl5Ni92VkFaSnVTUDRPQWlITWVmdVMxM2RYK1MwZHlndEllMWpmRU9ZaWF4QU9WN25MdDBnNGgwYkI3SXBmbFcwZXU4NzhVZ2Rqd1F0d1EyQVJMbXJCck1CK25aaWRuWkVoNHduVVg1MnNleUxnSVB0aHlUREUvUWU0NU5XTzVtQUxLRGRJOVoxMmQrZDZNQjQ0WGtvUlpKK093c3E2R2Vxak0zOWFOUEhBWkhqTEl2blppblFHUTVTNGhOQUM0ZjRtaXZpcEFHOHRxbnF1dDRiSEsycEtRVm1tUHh0dGNnRUtiMUpEbkNBeHdlY216bzdDMmx5ZFJ0SmVCUGdBUytRWmZGNlk1dTFXVDNRMWtveUVXWHdqQlZnbHVtdDN4SjV1MGRLU0Y0a0N2OGlDTncwK213ak83ZDBNamxjbCthSnR5S2xHNWgzelRFYk0ybFhWblR6WThLWjVLWU5QZGNvNm5tYWZpbnlEWlc4ZnIwZm4zNEZoUTNiaTBUVG1HU01oT0VDY3BVY2tVTndHbHNZVUJ0N2QvKzI1SDBMRVVGckpMcHY2bksyT1lJQ05TZ1hWY3g1NVQzRmx3aGErS3ltdjNMSW5wdXBrRW50Uk9JTnhnd21HMFAxd3hjZXBzNGFMeWw5UkJOWk1LUGpOV3VSSjVSS2VTUHcreE94cGpFNTFDeWJhcW9YTFhnSXF0R2kxczF4anI1TERidllvcVpIU3QzU0RrZ3VCOWJtaWZMZUdZbUoxeWdKZ0QxcTZYTmtsbWpYbC9MU2tWTllMSTE1MDNWRXlxVWtqSFN3bURmLzFKdks1SmNCRkh3aEJyMWttWGxGN28vakduUW9qWlZBMFh0Rm1uTkxNSWVQbkN0UUExSXQzdFdON0hWZTYwM2ZZREVXeTFUZEF4WDFwTFVEZ1oyS0E0a0xuWXRIOXlwczhqRWVyS1NBRlFJYjQyejhydXZ2UE9zdjFSRXBlT3JlSkVSRmFwWGRYV3NMZFRlMFFZVzFMRU8zQlFrUHlYeGhSeVNIaUpvWTZYQ0tiOVVna1JjTmZUMVZjcDlEcnM4T1dCS3ZiV0YzOW0zRm5tOW5DL2tIeEZJd2Z3Rld1Zy9jcXRDc0IvY2JhaHc2K0p5dUJzckJuOFFpS2RoV3NrR3pla0FrckNKZDB1UDZ0eldNNnI2bnM4eUZpT2UrUlROTnhieXB1dWNmVmlqck8vMHNMZHNFT3BNS0hjQjM0VzZHMTBXdWhNUUNHeFdidjFmaUlteE5rTnN3dC85VXBublBnV3NsRTZaYS83VEZ5bWpZd0J0RVBIV3JMMk9HUlY3N01GUS9qNk9IZ2xLTWtKVWczMkZGQWVxZzBYVlVRN2Q3cmFvQ0tZUGl4VU8rdzgxMHpIZmdyeW9kVTNRTVNvSm90L09XVjJ1WjQxSjlJVlRwQVhFRHI5YTB0eWhoU1ZkM1hERUQwWmdMdC9GN0FmcFo4cEs3UFdOY09SSU50K2lwMk9VWTllSkFLVHBQK09QZitTRnFPVWpkYXJGSytkQlNIK3BPMkNMSGZEbVVSR3NuK0djYmk3S0Z0bE1ZSjY3QS9uN3ZTVnIwcG1ud0xkSDUvdjdkejJXb1hxZWZpRkkwcjI4bXo3ZS94UFg0TXo5WEdsUWUwMmdEYi9lejZuQUp6MW14RGFwZ1BxazI2N2QxdG9YemFDRUxhYWl6WXkxK3M5RHBJdVUyeGZqMDhPcnU3WktNb2MvSUE3dVpNdVBlcTh2WUNkM3lwL1oxU1RCQk5RTVl6aEt0VnhmN2lrTWtiUGhqelJoYkc5YmtVQmtydWJ5MXo1NEswdElKVXFydG5ybWg5OFBCZmRtSC9oNFduS2d6UEtvalhPUy9VNE9DWW92OTAyN0FybnF5aXBRZUZhOHdMbE52Y3JET1FsSWgzZjd2bW5MMTVhbTlUeW1vcDA0ZEoxZ2JZYy9JaHhRbThlRmRsTC8xNExHdEZUUnFZS0ZFeWovTjVtSS9nTFVXODB1UGFBaEt5R3NuL2tRb3BGMS83QmpEN1dDZ3c9PTwveGVuYzpDaXBoZXJWYWx1ZT4KICAgPC94ZW5jOkNpcGhlckRhdGE+CjwveGVuYzpFbmNyeXB0ZWREYXRhPjwvc2FtbDpFbmNyeXB0ZWRBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4K']);

        $response = $saml->receiveSamlResponse();

        $this->assertNotNull($response);
        $this->assertInstanceOf(Response::class, $response);
    }

    protected function getMetadata()
    {
        $metadata = new Metadata();
        $metadata
            ->setIdentityProvider(
                (new IdpSsoDescriptor())
                    ->setID('http://idp.dev:8080')
                    ->setWantAuthnRequestsSigned(true)
                    ->addSingleSignOnService(
                        new SingleSignOnService('http://idp.dev:8080/sso', SamlConstants::BINDING_SAML2_HTTP_REDIRECT)
                    )
                    ->addSingleLogoutService(
                        new SingleLogoutService('http://idp.dev:8080/logout', SamlConstants::BINDING_SAML2_HTTP_POST)
                    )
                    ->addKeyDescriptor(new KeyDescriptor(
                        KeyDescriptor::USE_SIGNING,
                        X509Certificate::fromFile(__DIR__ . '/../example/keys/idp/idp.crt')
                    ))
            )->setServiceProvider(
                (new SpSsoDescriptor())
                    ->setID('http://sp.dev:8080')
                    ->addAssertionConsumerService(
                        new AssertionConsumerService(
                            'http://sp.dev:8080/acs.php',
                            SamlConstants::BINDING_SAML2_HTTP_POST
                        )
                    )
                    ->addSingleLogoutService(
                        new SingleLogoutService(
                            'http://sp.dev:8080/logout.php',
                            SamlConstants::BINDING_SAML2_HTTP_POST
                        )
                    )
                    ->addKeyDescriptor(new KeyDescriptor(
                        KeyDescriptor::USE_SIGNING,
                        X509Certificate::fromFile(__DIR__ . '/../example/keys/sp.crt')
                    ))
                    ->addKeyDescriptor(new KeyDescriptor(
                        KeyDescriptor::USE_ENCRYPTION,
                        X509Certificate::fromFile(__DIR__ . '/../example/keys/sp.crt')
                    )),
                file_get_contents(__DIR__ . '/../example/keys/sp.pem')
            );

        return $metadata;
    }
}
